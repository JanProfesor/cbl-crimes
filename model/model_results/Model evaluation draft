from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import KFold
from pytorch_tabnet.tab_model import TabNetRegressor
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

#performance metrics on the testset of the TabNet model
#!!!!should be adapted to the orginal model code before usage

y_pred = model.predict(X_test)
y_pred = y_pred.ravel()
y_test_flat = y_test.ravel()

mae = mean_absolute_error(y_test_flat, y_pred)
rmse = mean_squared_error(y_test_flat, y_pred, squared=False)
r2 = r2_score(y_test_flat, y_pred)

print(f"MAE:  {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²:   {r2:.2f}")


#5-fold cross validation
kf = KFold(n_splits=5, shuffle=True, random_state=42)
mae_scores = []
fold = 1
for train_idx, val_idx in kf.split(X.values):
    print(f"\nFold {fold}")
    
    X_tr, X_val = X.values[train_idx], X.values[val_idx]
    y_tr, y_val = y[train_idx].reshape(-1, 1), y[val_idx].reshape(-1, 1)

    model_cv = TabNetRegressor(
        n_d=8, n_a=8, n_steps=3,
        gamma=1.3,
        cat_idxs=cat_idxs,
        cat_dims=cat_dims,
        cat_emb_dim=1,
        optimizer_fn=torch.optim.Adam,
        optimizer_params=dict(lr=2e-2),
        scheduler_fn=torch.optim.lr_scheduler.StepLR,
        scheduler_params={"step_size":50, "gamma":0.9},
        mask_type='sparsemax',
        device_name=device
    )

    model_cv.fit(
        X_tr, y_tr,
        eval_set=[(X_val, y_val)],
        eval_metric=['mae'],
        max_epochs=50,
        patience=10,
        batch_size=1024,
        virtual_batch_size=128,
        verbose=0
    )

    preds = model_cv.predict(X_val).ravel()
    mae = mean_absolute_error(y_val.ravel(), preds)
    mae_scores.append(mae)
    print(f"MAE for Fold {fold}: {mae:.2f}")
    
    fold += 1

print(f"Average MAE: {np.mean(mae_scores):.2f}")
print(f"Std Dev MAE: {np.std(mae_scores):.2f}")


#Feature importance
# Get importance scores
importances = model.feature_importances_

# Match with feature names
feature_names = X.columns
fi_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

# Plot
plt.figure(figsize=(10, 6))
plt.barh(fi_df['Feature'], fi_df['Importance'])
plt.gca().invert_yaxis()
plt.title("Feature Importance")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()
